generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password_hash        String
  first_name           String?
  last_name            String?
  role                 String                @default("USER")
  profile_type         String?
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime              @updatedAt @db.Timestamptz(6)
  last_login           DateTime?             @db.Timestamptz(6)
  reset_token          String?               @db.VarChar(255)
  reset_token_expires  DateTime?             @db.Timestamptz(6)
  is_verified          Boolean               @default(false)
  verification_token   String?               @db.VarChar(255)
  additional_info      String?
  adeli_number         String?               @db.VarChar(50)
  avatar_url           String?               @db.VarChar(255)
  certification_number String?               @db.VarChar(50)
  diploma              String?               @db.VarChar(255)
  practice_address     String?               @db.VarChar(255)
  practice_city        String?               @db.VarChar(100)
  practice_postal_code String?               @db.VarChar(20)
  professional_type    String?               @db.VarChar(50)
  rpps_number          String?               @db.VarChar(50)
  speciality           String?               @db.VarChar(100)
  years_of_experience  Int?
  business_start_date  DateTime?             @db.Timestamptz(6)
  diploma_url          String?               @db.VarChar(255)
  is_remote            Boolean               @default(false)
  onboarding_completed Boolean               @default(false)
  phone                String?               @db.VarChar(20)
  services_list        String[]              @default([])
  businessHours        BusinessHours[]       @relation("user_business_hours")
  services             ProfessionalService[]

  @@map("users")
}

model BusinessHours {
  id         String  @id @default(uuid())
  userId     String
  day        Int
  open_time  String
  close_time String
  is_closed  Boolean @default(false)
  user       User    @relation("user_business_hours", fields: [userId], references: [id])

  @@map("business_hours")
}

model ProfessionalService {
  id          String  @id @default(uuid())
  userId      String
  name        String  @db.VarChar(255)
  description String?
  duration    Int?
  price       Float?
  is_custom   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])

  @@map("professional_services")
}

model DefaultService {
  id                String  @id @default(uuid())
  professional_type String  @db.VarChar(50)
  name              String  @db.VarChar(255)
  description       String?
  duration          Int?
  default_price     Float?

  @@map("default_services")
}

model Patient {
  id              String                  @id @default(uuid())
  name            String                  @db.VarChar(255)
  sport           String                  @db.VarChar(100)
  injury          String                  @db.VarChar(255)
  created_at      DateTime                @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                @updatedAt @db.Timestamptz(6)
  photo_url       String?                 @db.VarChar(255)
  recommendations PatientRecommendation[]

  @@map("patients")
}

model PatientRecommendation {
  id         String   @id @default(uuid())
  patientId  String
  type       String   @db.VarChar(50)
  content    String[]
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  patient    Patient  @relation(fields: [patientId], references: [id])

  @@map("patient_recommendations")
}
